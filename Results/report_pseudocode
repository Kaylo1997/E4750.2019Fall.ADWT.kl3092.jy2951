//Separable Kernel
self.dwt_forward1 = """
__global__ void w_kernel_forward1(input, tmp_a1, tmp_a2, filter_lo, filter_hi, maskwidth, H, W){
    //get row column index
    int Row = threadIdx.y + blockIdx.y*blockDim.y;
    int Col = threadIdx.x + blockIdx.x*blockDim.x;
    //obtain halfwidth for vertical downsampling
    int W_half = (W + maskwidth - 1)/2;
    // Perform vertical downsampling by half (separable method for DWT)
    if (Row < H && Col < W_half){
        c = maskwidth/2+3 //define c as center of filter (maskwidth/2)+3 for CDF 9/7 even kernel
        float res_tmp_a1 = 0, res_tmp_a2 = 0; // 1D Convolution with zeropadding boundary constraints
        int N_start_col = Col * 2 - c; // Note the downsampling via multiplication with 2
        for (int j = 0; j < maskwidth; j++) { //1D convolution based on accumulation of sums
            int curCol = N_start_col + j; //get start column
            int kerIdx = maskwidth - j - 1; //get current mask index
            if ((curCol > -1) && (curCol < W)){  // Apply the zero-padding via the conditional
                // Perform the convolution with both filters
                res_tmp_a1 += input[Row * W + curCol] * filter_lo[kerIdx];
                res_tmp_a2 += input[Row * W + curCol] * filter_hi[kerIdx]; //perform convolution
            }
        }
        tmp_a1[Row * W_half + Col] = res_tmp_a1;
        tmp_a2[Row * W_half + Col] = res_tmp_a2; //output convolution results
    }
}
"""
self.dwt_forward2 = """
__global__ void w_kernel_forward2(tmp_a1, tmp_a2, c_a, c_h, c_v, c_d, filter_lo, filter_hi, maswidth, H, W){
    int Row = threadIdx.y + blockIdx.y*blockDim.y;
    int Col = threadIdx.x + blockIdx.x*blockDim.x;
    // Obtain half of the width and height
    int H_half = (H + maskwidth - 1)/2;
    int W_half = (W + maskwidth - 1)/2;
    // Perform horizontal downsampling by half (separable method for DWT)
    if (Row < H_half && Col < W_half){
        // Apply convolution in the exact same fashion as forward 1, except convolve both inputs with both filters
        // and along the rows of the DWT
        ...
        //
        c_a[Row * W_half + Col] = res_a;
        c_h[Row * W_half + Col] = res_h;
        c_v[Row * W_half + Col] = res_v;
        c_d[Row * W_half + Col] = res_d; //output results
    }
}
"""

//Nonseparable Implmentation

//Optimized Implementation
